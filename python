import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

from sklearn.model_selection import train_test_split
from sklearn.metrics import classification_report, confusion_matrix
from xgboost import XGBClassifier

# Load your dataset (replace with your actual file or URL)
# Example: Air Quality dataset with pollutants like CO, NOx, O3, etc.
data = pd.read_csv("air_quality_data.csv")

# Preview data
print("Data preview:\n", data.head())

# Drop irrelevant columns (e.g., DateTime, ID if any)
data.drop(['Date', 'Time'], axis=1, inplace=True)

# Handle missing values
data.fillna(method='ffill', inplace=True)

# Assuming 'AirQualityIndex' is the label (e.g., Good, Moderate, Unhealthy)
# Convert categorical target if needed
if data['AirQualityIndex'].dtype == object:
    data['AirQualityIndex'] = data['AirQualityIndex'].astype('category').cat.codes

# Split features and labels
X = data.drop("AirQualityIndex", axis=1)
y = data["AirQualityIndex"]

# Train-test split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Train model
model = XGBClassifier(use_label_encoder=False, eval_metric='mlogloss')
model.fit(X_train, y_train)

# Predictions
y_pred = model.predict(X_test)

# Evaluation
print("Classification Report:\n", classification_report(y_test, y_pred))
print("Confusion Matrix:\n", confusion_matrix(y_test, y_pred))

# Feature Importance
plt.figure(figsize=(10,6))
sns.barplot(x=model.feature_importances_, y=X.columns)
plt.title('Feature Importance')
plt.xlabel('Importance')
plt.ylabel('Features')
plt.tight_layout()
plt.show()
